npm i apollo-server-express express graphql reflect-metadata type-graphql

npm i --save-dev @types/express @types/graphql @types/node nodemon ts-node typescrips

esnext.asynciterable // is needed to work with apollo
"emitDecoratorMetadata": true, // to work with typegraphql
"experimentalDecorators": true, // to work with typegraphql

npm i pg typeorm bcryptjs
npm i --save-dev @types/bcryptjs

ts-node-dev restarts faster
    "start": "nodemon --exec ts-node src/index.ts"
    "start": "ts-node-dev src/index.ts"

// so we can do import Express from "express" rather than * as Express
"allowSyntheticDefaultImports": true,
"esModuleInterop": true,

npm i class-validator
Fractal folder structure: https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af

custom decorators: https://github.com/typestack/class-validator#custom-validation-decorators

npm install ioredis connect-redis express-session cors
npm install --save-dev @types/ioredis @types/connect-redis @types/express-session @types/cors

npm i nodemailer uuid
npm i --save-dev @types/nodemailer @types/uuid

dependency injection:
    pattern used is active record pattern
    another approach